import { IAssetTrigger, IBuyOrder, ICancelMarketOrder, IClaim, IConfigITO, IConfigMarketplace, IConfigValidator, ICreateAsset, ICreateMarketplace, ICreateValidator, IDelegate, IDeposit, IFreeze, IITOTrigger, IProposal, ISellOrder, ISetAccountName, ISetITOPrices, ISmartContract, ITransfer, IUndelegate, IUnfreeze, IUnjail, IUpdateAccountPermission, IVotes, IWithdraw } from "./contracts";
import { TransactionType } from "./enums";
export interface ITransaction {
    RawData: {
        Sender: string;
        Nonce: number;
        Contract: IContract[];
        Data: string[];
        KAppFee: number;
        BandwidthFee: number;
        Version: number;
        ChainID: string;
        PermissionID: number;
    };
    Signature: string[];
}
export interface ITransactionResponseData {
    result: ITransaction;
    txHash: string;
}
export interface ITransactionResponse extends IRequest {
    data: ITransactionResponseData;
}
export interface IFees {
    KAppFee: number;
    BandwidthFee: number;
    TotalFee: number;
}
export interface IContract {
    Parameter: IContractParameter;
}
export interface IContractParameter {
    type_url: string;
    value: string;
}
export interface ITxRequest {
    type: TransactionType;
    sender: string;
    nonce: number;
    contracts: IPayload[];
    data?: string[];
    permID?: number;
    kdaFee?: string;
}
export interface IContractRequest {
    type: TransactionType;
    payload: IPayload;
}
export interface ITxOptionsRequest {
    nonce?: number;
    permID?: number;
    kdaFee?: string;
    sender?: string;
    provider?: IProvider;
}
export declare type IPayload = ITransfer | ICreateAsset | ICreateValidator | IConfigValidator | IFreeze | IUnfreeze | IDelegate | IUndelegate | IWithdraw | IClaim | IUnjail | IAssetTrigger | ISetAccountName | IProposal | IVotes | IConfigITO | ISetITOPrices | IBuyOrder | ISellOrder | ICancelMarketOrder | ICreateMarketplace | IConfigMarketplace | IUpdateAccountPermission | IDeposit | IITOTrigger | ISmartContract;
export interface IBroadcastResponse {
    data: {
        txsHashes: string[];
    };
    error: string;
    code: string;
}
export interface IProvider {
    node: string;
    api: string;
}
export interface IAccountNonce {
    data: {
        firstPendingNonce: number;
        nonce: number;
        txPending: number;
    };
    error: string;
    code: string;
}
interface IRequest {
    error: string;
    code: string;
}
export interface IAccountAsset {
    address: string;
    assetId: string;
    assetType: number;
    balance: number;
    precision: number;
    frozenBalance: number;
    unfrozenBalance: number;
    lastClaim: {
        timestamp: number;
        epoch: number;
    };
    buckets?: IBucket[];
    owner?: boolean;
    staking?: {
        interestType: string;
        minEpochsToWithdraw?: number;
        minEpochsToUnstake?: number;
        minEpochsToClaim?: number;
    };
}
export interface IBucket {
    address?: string;
    id: string;
    stakeAt: number;
    stakedEpoch: number;
    unstakedEpoch: number;
    balance: number;
    delegation: string;
    availableEpoch: number | string;
}
export interface INfts {
    address: string;
    assetName: string;
    collection: string;
    assetId: string;
    nftNonce: number;
    mime?: string;
    metadata?: string;
}
export interface IPermissions {
    id: number;
    type: number;
    permissionName: string;
    Threshold: number;
    operations: string;
    signers: [
        {
            address: string;
            weight: number;
        }
    ];
}
export interface IPagination {
    self: number;
    next: number;
    previous: number;
    perPage: number;
    totalPages: number;
    totalRecords: number;
}
export interface IAccount {
    name?: string;
    address: string;
    nonce: number;
    balance: number;
    frozenBalance: number;
    blsPublicKey?: string;
    allowance?: number;
    assets: {
        [key: string]: IAccountAsset;
    };
    buckets?: [
        {
            [key: string]: IBucket;
        }
    ];
    collection?: INfts[];
    timestamp: number;
    permissions?: IPermissions[];
}
export interface IAccountResponse extends IRequest {
    data: {
        account: IAccount;
    };
    pagination: IPagination;
}
export {};
