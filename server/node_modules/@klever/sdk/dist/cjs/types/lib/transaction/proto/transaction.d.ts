import _m0 from "protobufjs/minimal";
import { FileDescriptorProto } from "ts-proto-descriptors";
import { Any } from "../../../google/protobuf/any";
export declare const protobufPackage = "proto";
/** TXContract available */
export interface TXContract {
    Type?: TXContract_ContractType;
    Parameter?: Any;
}
export declare enum TXContract_ContractType {
    TransferContractType = 0,
    CreateAssetContractType = 1,
    CreateValidatorContractType = 2,
    ValidatorConfigContractType = 3,
    FreezeContractType = 4,
    UnfreezeContractType = 5,
    DelegateContractType = 6,
    UndelegateContractType = 7,
    WithdrawContractType = 8,
    ClaimContractType = 9,
    UnjailContractType = 10,
    AssetTriggerContractType = 11,
    SetAccountNameContractType = 12,
    ProposalContractType = 13,
    VoteContractType = 14,
    ConfigITOContractType = 15,
    SetITOPricesContractType = 16,
    BuyContractType = 17,
    SellContractType = 18,
    CancelMarketOrderContractType = 19,
    CreateMarketplaceContractType = 20,
    ConfigMarketplaceContractType = 21,
    UpdateAccountPermissionContractType = 22,
    UNRECOGNIZED = -1
}
export declare function tXContract_ContractTypeFromJSON(object: any): TXContract_ContractType;
export declare function tXContract_ContractTypeToJSON(object: TXContract_ContractType): number;
/** Transaction holds all the data needed for a value transfer */
export interface Transaction {
    RawData?: Transaction_Raw;
    Signature?: Uint8Array[];
    Result?: Transaction_TXResult;
    ResultCode?: Transaction_TXResultCode;
    Receipts?: Transaction_Receipt[];
    Block?: number;
}
export declare enum Transaction_TXResult {
    SUCCESS = 0,
    FAILED = 1,
    UNRECOGNIZED = -1
}
export declare function transaction_TXResultFromJSON(object: any): Transaction_TXResult;
export declare function transaction_TXResultToJSON(object: Transaction_TXResult): number;
export declare enum Transaction_TXResultCode {
    Ok = 0,
    OutOfFunds = 1,
    AccountError = 2,
    AssetError = 3,
    ContractInvalid = 4,
    ContractNotFound = 5,
    FeeInvalid = 6,
    ParameterInvalid = 7,
    APRInvalid = 8,
    AssetIDInvalid = 9,
    AssetTypeInvalid = 10,
    AssetCantBeMinted = 11,
    AssetCantBeBurned = 12,
    AssetCantBePaused = 13,
    AssetCantBeDelegated = 14,
    AssetOwnerCantBeChanged = 15,
    AccountNotOwner = 16,
    CommissionTooHigh = 17,
    DelegationAmountInvalid = 18,
    ProposalNotActive = 19,
    ValueInvalid = 20,
    AmountInvalid = 21,
    BucketIDInvalid = 22,
    KeyConflict = 23,
    MaxDelegationAmount = 24,
    InvalidPeerKey = 25,
    MinKFIStakedUnreached = 26,
    MaxSupplyExeeced = 27,
    SaveAccountError = 28,
    LoadAccountError = 29,
    SameAccountError = 30,
    AssetPaused = 31,
    DeletegateError = 32,
    WithdrawNotAvailable = 33,
    ErrOverflow = 34,
    SetStakingErr = 35,
    SetMarketOrderErr = 36,
    BalanceError = 37,
    KAPPError = 38,
    UnfreezeError = 39,
    UndeletegateError = 40,
    WithdrawError = 41,
    ClaimError = 42,
    BucketsExceded = 43,
    AssetCantBeWiped = 44,
    AssetCantAddRoles = 45,
    FreezeError = 46,
    Fail = 99,
    UNRECOGNIZED = -1
}
export declare function transaction_TXResultCodeFromJSON(object: any): Transaction_TXResultCode;
export declare function transaction_TXResultCodeToJSON(object: Transaction_TXResultCode): number;
export interface Transaction_Raw {
    Nonce?: number;
    Sender?: Uint8Array;
    Contract?: TXContract[];
    PermissionID?: number;
    Data?: Uint8Array[];
    KAppFee?: number;
    BandwidthFee?: number;
    Version?: number;
    ChainID?: Uint8Array;
}
export interface Transaction_Receipt {
    Data?: Uint8Array[];
}
export declare const TXContract: {
    encode(message: TXContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TXContract;
    fromJSON(object: any): TXContract;
    toJSON(message: TXContract): unknown;
    fromPartial<I extends {
        Type?: TXContract_ContractType | undefined;
        Parameter?: {
            type_url?: string | undefined;
            value?: Uint8Array | undefined;
        } | undefined;
    } & {
        Type?: TXContract_ContractType | undefined;
        Parameter?: ({
            type_url?: string | undefined;
            value?: Uint8Array | undefined;
        } & {
            type_url?: string | undefined;
            value?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["Parameter"], keyof Any>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof TXContract>]: never; }>(object: I): TXContract;
};
export declare const Transaction: {
    encode(message: Transaction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Transaction;
    fromJSON(object: any): Transaction;
    toJSON(message: Transaction): unknown;
    fromPartial<I extends {
        RawData?: {
            Nonce?: number | undefined;
            Sender?: Uint8Array | undefined;
            Contract?: {
                Type?: TXContract_ContractType | undefined;
                Parameter?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
            }[] | undefined;
            PermissionID?: number | undefined;
            Data?: Uint8Array[] | undefined;
            KAppFee?: number | undefined;
            BandwidthFee?: number | undefined;
            Version?: number | undefined;
            ChainID?: Uint8Array | undefined;
        } | undefined;
        Signature?: Uint8Array[] | undefined;
        Result?: Transaction_TXResult | undefined;
        ResultCode?: Transaction_TXResultCode | undefined;
        Receipts?: {
            Data?: Uint8Array[] | undefined;
        }[] | undefined;
        Block?: number | undefined;
    } & {
        RawData?: ({
            Nonce?: number | undefined;
            Sender?: Uint8Array | undefined;
            Contract?: {
                Type?: TXContract_ContractType | undefined;
                Parameter?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
            }[] | undefined;
            PermissionID?: number | undefined;
            Data?: Uint8Array[] | undefined;
            KAppFee?: number | undefined;
            BandwidthFee?: number | undefined;
            Version?: number | undefined;
            ChainID?: Uint8Array | undefined;
        } & {
            Nonce?: number | undefined;
            Sender?: Uint8Array | undefined;
            Contract?: ({
                Type?: TXContract_ContractType | undefined;
                Parameter?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
            }[] & ({
                Type?: TXContract_ContractType | undefined;
                Parameter?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
            } & {
                Type?: TXContract_ContractType | undefined;
                Parameter?: ({
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } & {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } & { [K in Exclude<keyof I["RawData"]["Contract"][number]["Parameter"], keyof Any>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["RawData"]["Contract"][number], keyof TXContract>]: never; })[] & { [K_2 in Exclude<keyof I["RawData"]["Contract"], keyof {
                Type?: TXContract_ContractType | undefined;
                Parameter?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
            PermissionID?: number | undefined;
            Data?: (Uint8Array[] & Uint8Array[] & { [K_3 in Exclude<keyof I["RawData"]["Data"], keyof Uint8Array[]>]: never; }) | undefined;
            KAppFee?: number | undefined;
            BandwidthFee?: number | undefined;
            Version?: number | undefined;
            ChainID?: Uint8Array | undefined;
        } & { [K_4 in Exclude<keyof I["RawData"], keyof Transaction_Raw>]: never; }) | undefined;
        Signature?: (Uint8Array[] & Uint8Array[] & { [K_5 in Exclude<keyof I["Signature"], keyof Uint8Array[]>]: never; }) | undefined;
        Result?: Transaction_TXResult | undefined;
        ResultCode?: Transaction_TXResultCode | undefined;
        Receipts?: ({
            Data?: Uint8Array[] | undefined;
        }[] & ({
            Data?: Uint8Array[] | undefined;
        } & {
            Data?: (Uint8Array[] & Uint8Array[] & { [K_6 in Exclude<keyof I["Receipts"][number]["Data"], keyof Uint8Array[]>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["Receipts"][number], "Data">]: never; })[] & { [K_8 in Exclude<keyof I["Receipts"], keyof {
            Data?: Uint8Array[] | undefined;
        }[]>]: never; }) | undefined;
        Block?: number | undefined;
    } & { [K_9 in Exclude<keyof I, keyof Transaction>]: never; }>(object: I): Transaction;
};
export declare const Transaction_Raw: {
    encode(message: Transaction_Raw, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Transaction_Raw;
    fromJSON(object: any): Transaction_Raw;
    toJSON(message: Transaction_Raw): unknown;
    fromPartial<I extends {
        Nonce?: number | undefined;
        Sender?: Uint8Array | undefined;
        Contract?: {
            Type?: TXContract_ContractType | undefined;
            Parameter?: {
                type_url?: string | undefined;
                value?: Uint8Array | undefined;
            } | undefined;
        }[] | undefined;
        PermissionID?: number | undefined;
        Data?: Uint8Array[] | undefined;
        KAppFee?: number | undefined;
        BandwidthFee?: number | undefined;
        Version?: number | undefined;
        ChainID?: Uint8Array | undefined;
    } & {
        Nonce?: number | undefined;
        Sender?: Uint8Array | undefined;
        Contract?: ({
            Type?: TXContract_ContractType | undefined;
            Parameter?: {
                type_url?: string | undefined;
                value?: Uint8Array | undefined;
            } | undefined;
        }[] & ({
            Type?: TXContract_ContractType | undefined;
            Parameter?: {
                type_url?: string | undefined;
                value?: Uint8Array | undefined;
            } | undefined;
        } & {
            Type?: TXContract_ContractType | undefined;
            Parameter?: ({
                type_url?: string | undefined;
                value?: Uint8Array | undefined;
            } & {
                type_url?: string | undefined;
                value?: Uint8Array | undefined;
            } & { [K in Exclude<keyof I["Contract"][number]["Parameter"], keyof Any>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["Contract"][number], keyof TXContract>]: never; })[] & { [K_2 in Exclude<keyof I["Contract"], keyof {
            Type?: TXContract_ContractType | undefined;
            Parameter?: {
                type_url?: string | undefined;
                value?: Uint8Array | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        PermissionID?: number | undefined;
        Data?: (Uint8Array[] & Uint8Array[] & { [K_3 in Exclude<keyof I["Data"], keyof Uint8Array[]>]: never; }) | undefined;
        KAppFee?: number | undefined;
        BandwidthFee?: number | undefined;
        Version?: number | undefined;
        ChainID?: Uint8Array | undefined;
    } & { [K_4 in Exclude<keyof I, keyof Transaction_Raw>]: never; }>(object: I): Transaction_Raw;
};
export declare const Transaction_Receipt: {
    encode(message: Transaction_Receipt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Transaction_Receipt;
    fromJSON(object: any): Transaction_Receipt;
    toJSON(message: Transaction_Receipt): unknown;
    fromPartial<I extends {
        Data?: Uint8Array[] | undefined;
    } & {
        Data?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["Data"], keyof Uint8Array[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "Data">]: never; }>(object: I): Transaction_Receipt;
};
declare type ProtoMetaMessageOptions = {
    options?: {
        [key: string]: any;
    };
    fields?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    oneof?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    nested?: {
        [key: string]: ProtoMetaMessageOptions;
    };
};
export interface ProtoMetadata {
    fileDescriptor: FileDescriptorProto;
    references: {
        [key: string]: any;
    };
    dependencies?: ProtoMetadata[];
    options?: {
        options?: {
            [key: string]: any;
        };
        services?: {
            [key: string]: {
                options?: {
                    [key: string]: any;
                };
                methods?: {
                    [key: string]: {
                        [key: string]: any;
                    };
                };
            };
        };
        messages?: {
            [key: string]: ProtoMetaMessageOptions;
        };
        enums?: {
            [key: string]: {
                options?: {
                    [key: string]: any;
                };
                values?: {
                    [key: string]: {
                        [key: string]: any;
                    };
                };
            };
        };
    };
}
export declare const protoMetadata: ProtoMetadata;
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
