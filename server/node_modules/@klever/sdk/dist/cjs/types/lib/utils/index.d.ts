import { Account, IProvider, ITransaction } from "..";
import { IBroadcastResponse } from "@klever/kleverweb/dist/types/dtos";
import { IDecodedTransaction } from "../types/dtos";
declare const utils: {
    getAddressFromPrivateKey: (privateKey: string) => Promise<string>;
    generateKeyPair: () => Promise<{
        privateKey: string;
        address: string;
    }>;
    getProviders: () => IProvider;
    setProviders: (providers: IProvider) => void;
    broadcastTransactions: (txs: ITransaction[] | string[]) => Promise<IBroadcastResponse>;
    decodeTransaction: (tx: ITransaction) => Promise<IDecodedTransaction>;
    transactionsProcessed: (txs: Promise<IBroadcastResponse>[], tries?: number) => Promise<IDecodedTransaction[]>;
    accountsReady: (accounts: Account[]) => Promise<void>;
    decodeAddress: (address: string) => Promise<Uint8Array>;
    encodeAddress: (address: Uint8Array) => string;
    toHex: (data: Uint8Array) => string;
    validateSignature: (message: string, signature: string, address: string) => Promise<boolean>;
};
export default utils;
