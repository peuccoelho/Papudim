import { ABITypeJSON } from "../types/abi";
export declare function twosComplement(value: number, bitsSize: number, isNested?: boolean): string;
export declare function encodeBigNumber(value: number, isNested?: boolean): string;
export declare function encodeLengthPlusData(value: string | any[], innerType: string, isNested?: boolean): string | string[];
export declare function toByteArray(str: string): number[];
export declare const encodeWithABI: (abi: ABITypeJSON, value: any, type: string) => string;
export declare const isCustomType: (type: string) => boolean;
export declare const encodeABIValue: (value: any, type: string, isNested?: boolean) => string;
export declare function encodeAddress(value: string): string;
export declare function encodeVariadic(value: any[], type: string): string;
declare const abiEncoder: {
    encodeABIValue: (value: any, type: string, isNested?: boolean) => string;
    encodeWithABI: (abi: ABITypeJSON, value: any, type: string) => string;
    encodeLengthPlusData: typeof encodeLengthPlusData;
    toByteArray: typeof toByteArray;
    encodeBigNumber: typeof encodeBigNumber;
    twosComplement: typeof twosComplement;
    encodeAddress: typeof encodeAddress;
};
export default abiEncoder;
