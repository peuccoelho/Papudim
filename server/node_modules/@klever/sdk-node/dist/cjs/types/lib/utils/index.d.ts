import { Account, IProvider, ITransaction, TXContract_ContractType } from "..";
import { IBroadcastResponse, IFees } from "@klever/kleverweb/dist/types/dtos";
import { IDecodedTransaction } from "../types/dtos";
import { IParsedNetworkParam } from "../types/proposals";
export declare const reverseHexBytes: (hex: string) => string;
export declare const parseAccountPermissionBinaryOperations: (binary: string) => string;
export declare const calculateFees: (contractType: TXContract_ContractType, { data, network, networkParams, }: {
    data?: string | undefined;
    network?: string | undefined;
    networkParams?: IParsedNetworkParam[] | undefined;
}) => Promise<IFees>;
export declare const getNetworkParams: (network?: string) => Promise<IParsedNetworkParam[]>;
export declare const getKappFee: (contractType: TXContract_ContractType, networkParams: IParsedNetworkParam[]) => number;
export declare const getBandwidthFee: (data: string, networkParams: IParsedNetworkParam[]) => number;
export declare const getCleanType: (abiType: string, toLower?: boolean) => string;
export declare const getJSType: (abiType: string) => string;
declare const utils: {
    getAddressFromPrivateKey: (privateKey: string) => Promise<string>;
    generateKeyPair: () => Promise<{
        privateKey: string;
        address: string;
    }>;
    getProviders: () => IProvider;
    setProviders: (providers: IProvider) => void;
    broadcastTransactions: (txs: ITransaction[] | string[]) => Promise<IBroadcastResponse>;
    decodeTransaction: (tx: ITransaction) => Promise<IDecodedTransaction>;
    transactionsProcessed: (txs: Promise<IBroadcastResponse>[], tries?: number) => Promise<IDecodedTransaction[]>;
    accountsReady: (accounts: Account[]) => Promise<void>;
    decodeAddress: (address: string) => Promise<Uint8Array>;
    encodeAddress: (address: Uint8Array) => string;
    toHex: (data: Uint8Array) => string;
    fromHex: (hex: string) => Uint8Array;
    validateSignature: (message: string, signature: string, address: string) => Promise<boolean>;
    validateAddress: (address: string) => Promise<boolean>;
    calculateFees: (contractType: TXContract_ContractType, { data, network, networkParams, }: {
        data?: string | undefined;
        network?: string | undefined;
        networkParams?: IParsedNetworkParam[] | undefined;
    }) => Promise<IFees>;
    getNetworkParams: (network?: string) => Promise<IParsedNetworkParam[]>;
    getCleanType: (abiType: string, toLower?: boolean) => string;
    getJSType: (abiType: string) => string;
};
export default utils;
